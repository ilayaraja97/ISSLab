#include <bits/stdc++.h>

using namespace std;

string des(string in)
{
    if(in.length()==0)
        return "";
    while(in.length()<8)
    {
        in.push_back(' ');
    }
    int input[64]={0},
        pc2_key[48],
        c[28],d[28],
        ip[64],
        sbox_out[32],
        final_perm_out[32],
        ebit[48],
        inpXorKey[48],
        ct_final[64];
    const int key[64]=
            {
                0,0,1,1,0,1,0,0,
                0,0,1,1,0,1,0,0,
                1,0,1,1,0,1,0,1,
                0,0,1,1,1,1,0,1,
                0,0,1,0,0,1,0,1,
                0,1,1,1,0,1,0,1,
                0,0,1,1,0,1,0,0,
                1,0,1,1,0,1,1,0,
               },
        ip_map[64]=
            {
                58,50,42,34,26,18,10,2,
                60,52,44,36,28,20,12,4,
                62,54,46,38,30,22,14,6,
                64,56,48,40,32,24,16,8,
                57,49,41,33,25,17,9,1,
                59,51,43,35,27,19,11,3,
                61,53,45,37,29,21,13,5,
                63,55,47,39,31,23,15,7
            },
        pc1[56]=
            {
                57,49,41,33,25,17,9,
                 1,58,50,42,34,26,18,
                 10,2,59,51,4, 35,27,
                 19,11,3,60 ,2,44,36,
                 63,55,47, 39,31,23, 15,
                  7, 62, 54, 46, 38, 30, 22,
                 14, 6, 61, 53, 45, 37, 29,
                 21, 13, 5, 28, 20, 12, 4
            },
        pc2[48]=
            {
                14,  17,  11,  24,   1,   5,
                3,  28,  15,   6,  21,  10,
                23,  19,  12,   4,  26,   8,
                16,   7,  27,  20,  13,   2,
                41,  52,  31,  37,  47,  55,
                30, 40 , 51,  45,  33  ,48,
                44,  49,  39,  56,  34,  53,
                46, 42,  50 , 36  ,29,  32
            },
        key_scheduler[16]=
            {
                1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
            },
        ebit_selection[48]=
            {
                32, 1, 2, 3, 4, 5,
                 4, 5, 6, 7, 8, 9,
                 8, 9, 10, 11, 12, 13,
                12, 13, 14, 15, 16, 17,
                16, 17, 18, 19, 20, 21,
                20,  21,  22,  23,  24,  25,
                24,  25,  26,  27,  28,  29,
                28,  29,  30,  31,  32,   1
            },
        sbox[8][4][16]=
            {
                {
                    {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
                    {0, 15, 7, 4, 14, 2, 13, 10, 3, 6, 12, 11, 9, 5, 3, 8},
                    {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
                    {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
                },
                {
                    {15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
                    {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
                    {0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
                    {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
                },
                {
                    {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
                    {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
                    {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
                    {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
                },
                {
                    {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
                    {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
                    {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
                    {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
                },
                {
                    {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
                    {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
                    {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
                    {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
                },
                {
                    {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
                    {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
                    {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
                    {4,3,2,12,9,5,15,10,11,14,1,7,10,0,8,13}
                },
                {
                    {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
                    {13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
                    {1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
                    {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
                },
                {
                    {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
                    {1,15,13,8,10,3,7,4,12,5,6,11,10,14,9,2},
                    {7,11,4,1,9,12,14,2,0,6,10,10,15,3,5,8},
                    {2,1,14,7,4,10,8,13,15,12,9,9,3,5,6,11}
                }
            },
            final_perm[32]=
                {   
                    16,29,1,5,2,32,19,22,
                    7,12,15,18,8,27,13,11,
                    20,28,23,31,24,3,30,4,
                    21,17,26,10,14,9,6,25
                },
            ip_inverse[64]=
                {
                    40,  8,  48,  16,  56, 24,  64,  32,  
                    39,  7,  47,  15,  55,  23,  63,  31,   
                    38,  6,  46,  14,  54,  22,  62,  30, 
                    37,  5,  45,  13,  53,  21,  61,  29,  
                    36,  4,  44,  12,  52,  20,  60,  28,  
                    35,  3,  43,  11,  51,  19,  59,  27,
                    34,  2,  42,  10,  50,  18,  58,  26, 
                    33,  1,  41,   9,  49,  17,  57,  25
                };
    ostringstream oss;
    oss<<bitset<8>(in[0]).to_string()<<bitset<8>(in[1]).to_string()
        <<bitset<8>(in[2]).to_string()<<bitset<8>(in[3]).to_string()
        <<bitset<8>(in[4]).to_string()<<bitset<8>(in[5]).to_string()
        <<bitset<8>(in[6]).to_string()<<bitset<8>(in[7]).to_string();
    string temp=oss.str();
    for(int i=0;i<64;i++)
    {
        input[i]=temp[i]-'0';
    }
    //init permute
    for(int i=0;i<64;i++)
    {
        ip[ip_map[i]-1]=input[i];
    }
    //pc1
    for(int j=0;j<64;j++)
    {
        if(j%8!=7)
        {
            int i=pc1[j];
            if(i>28)
            {
                d[i-28-1]=key[j];
            }
            else
            {
                c[i-1]=key[j];
            }
        }
    }
    for(int round=0;round<16;round++)
    {
        //key shift
        for(int k=0;k<key_scheduler[round];k++)
        {
            //left circ shift
            int ct=c[0];
            int dt=d[0];
            for(int i=1;i<28;i++)
            {
                c[i-1]=c[i];
                d[i-1]=d[i];
            }
            c[27]=ct;
            d[27]=dt;
        }
        //pc2
        for(int i=0;i<48;i++)
        {
            pc2_key[i]=(pc2[i]>28)?d[pc2[i]-1-28]:c[pc2[i]-1];
        }
        //ebit
        for(int i=0;i<48;i++)
        {
            ebit[i]=ip[ebit_selection[i]+32-1];
        }
        //xor ebit pc2_key
        for(int i=0;i<48;i++)
        {
            inpXorKey[i]=ebit[i]^pc2_key[i];
        }
        //sbox perm
        for(int i=0;i<48;i+=6)
        {
            sbox_out[(i/6)*4+0]=(sbox [i/6] [inpXorKey[i+0]*2+inpXorKey[i+1]] [inpXorKey[i+2]*8+inpXorKey[i+3]*4+inpXorKey[i+4]*2+inpXorKey[i+5]] & 8)/8;
            sbox_out[(i/6)*4+1]=(sbox [i/6] [inpXorKey[i+0]*2+inpXorKey[i+1]] [inpXorKey[i+2]*8+inpXorKey[i+3]*4+inpXorKey[i+4]*2+inpXorKey[i+5]] & 4)/4;
            sbox_out[(i/6)*4+2]=(sbox [i/6] [inpXorKey[i+0]*2+inpXorKey[i+1]] [inpXorKey[i+2]*8+inpXorKey[i+3]*4+inpXorKey[i+4]*2+inpXorKey[i+5]] & 2)/2;
            sbox_out[(i/6)*4+3]=(sbox [i/6] [inpXorKey[i+0]*2+inpXorKey[i+1]] [inpXorKey[i+2]*8+inpXorKey[i+3]*4+inpXorKey[i+4]*2+inpXorKey[i+5]] & 1)/1;
        }
        //final perm
        for(int i=0;i<32;i++)
        {
            final_perm_out[final_perm[i]-1]=sbox_out[i];
        }
        //xor left right
        for(int i=0;i<32;i++)
        {
            ip[32-1+i]=ip[i-1]^final_perm_out[i];
        }
    }
    for(int i=0;i<64;i++)
    {
        ct_final[i]=ip[ip_inverse[i]-1];
    }
    string ret="";
    int stuff;
    for(int i=0;i<8;i++)
    {   
        stuff=0;
        for(int j=0;j<8;j++)
        {
            stuff=(stuff<<1)|ct_final[i*8+j];
        }
        ret.push_back((char)stuff);
    }
    return ret+((in.length()>8)?des(in.substr(8)):"");
}

int main(int argv,char *args[])
{
    cout<<des(args[1])<<endl;
    return 0;
}
